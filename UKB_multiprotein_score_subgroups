# Investigate weighted score in subgroups for Table 2
install.packages("pacman", repos = "https://cloud.r-project.org")
pacman::p_load("tidyverse", "data.table", "survival", "mice",  "boot")


# --- Threading guards (avoid hidden memory blow-ups) ---
data.table::setDTthreads(1)
Sys.setenv(OMP_NUM_THREADS = "1", MKL_NUM_THREADS = "1", OPENBLAS_NUM_THREADS = "1")

## ---- Inputs staged at /in by DNAnexus ----
# Load the data

flat_data <- fread("baseline_followup_proteins_SAS_nomice.csv")  %>% filter(!is.na(weighted_score_sd))

bootstrap_cindex <- function(data, outcome, followup_t, 
                             predictor = "weighted_score_sd", 
                             n_boots = 1000, seed = 123) {
  # Set seed for reproducibility
  set.seed(seed)
  
  # Create formula
  formula_str <- paste0("Surv(", followup_t, ", ", outcome, ") ~ ", predictor)
  model_formula <- as.formula(formula_str)
  
  # Original C-index calculation
  orig_model <- coxph(model_formula, data = data)
  orig_cindex <- concordance(orig_model)$concordance
  
  # Initialize vector for bootstrap results
  boot_cindices <- numeric(n_boots)
  
  # Bootstrap loop
  for(i in 1:n_boots) {
    # Sample with replacement
    boot_indices <- sample(1:nrow(data), replace = TRUE)
    boot_data <- data[boot_indices, ]
    
    # Fit model on bootstrap sample
    boot_cindices[i] <- tryCatch({
      model <- coxph(model_formula, data = boot_data)
      concordance(model)$concordance
    }, error = function(e) NA)
    
    # Optional: Print progress every 100 iterations
    if(i %% 100 == 0) {
      cat(sprintf("Completed %d of %d bootstrap iterations\n", i, n_boots))
    }
  }
  
  # Remove any NA values
  boot_cindices <- boot_cindices[!is.na(boot_cindices)]
  
  # Calculate confidence intervals
  ci_lower <- quantile(boot_cindices, 0.025)
  ci_upper <- quantile(boot_cindices, 0.975)
  
  # Create results list
  results <- list(
    original_cindex = orig_cindex,
    boot_mean = mean(boot_cindices),
    ci_lower = ci_lower,
    ci_upper = ci_upper,
    boot_sd = sd(boot_cindices),
    boot_values = boot_cindices,
    n_boots_completed = length(boot_cindices),
    formula = formula_str
  )
  
  return(results)
}

# Function to calculate bootstrapped C-index with confidence intervals
calculate_stratified_cindex <- function(data, outcome, weighted_score, strata_var, 
                                        time_col = NULL, time_threshold = NULL,
                                        custom_groups = NULL, 
                                        n_bootstrap = 1000,
                                        conf_level = 0.95) {
  
  
  # Initialize results dataframe
  cindex_results <- data.frame(
    Strata = character(),
    C_Index = numeric(),
    C_Index_SE = numeric(),
    CI_Lower = numeric(),
    CI_Upper = numeric(),
    N_Cases = numeric(),
    N_Total = numeric(),
    stringsAsFactors = FALSE
  )
  
  # Bootstrap function for C-index calculation
  bootstrap_cindex <- function(data, indices) {
    bootstrap_sample <- data[indices, ]
    cox_formula <- as.formula(paste("Surv(inc_followup_days, ", outcome, ") ~", weighted_score))
    cox_result <- tryCatch({
      model <- coxph(cox_formula, data = bootstrap_sample)
      return(as.numeric(summary(model)$concordance[1]))
    }, error = function(e) {
      return(NA)
    })
  }
  
  # Function to calculate C-index with bootstrap CI for a dataset
  calc_cindex_with_boot <- function(subset_data, strata_name) {
    if(nrow(subset_data) == 0 || sum(subset_data[[outcome]], na.rm = TRUE) < 2) {
      return(data.frame(
        Strata = strata_name,
        C_Index = NA,
        C_Index_SE = NA,
        CI_Lower = NA,
        CI_Upper = NA,
        N_Cases = sum(subset_data[[outcome]], na.rm = TRUE),
        N_Total = nrow(subset_data)
      ))
    }
    
    # Initial C-index calculation
    cox_formula <- as.formula(paste("Surv(inc_followup_days,", outcome, ") ~", weighted_score))
    cox_result <- tryCatch({
      coxph(cox_formula, data = subset_data)
    }, error = function(e) {
      return(NULL)
    })
    
    if(is.null(cox_result)) {
      return(data.frame(
        Strata = strata_name,
        C_Index = NA,
        C_Index_SE = NA,
        CI_Lower = NA,
        CI_Upper = NA,
        N_Cases = sum(subset_data[[outcome]], na.rm = TRUE),
        N_Total = nrow(subset_data)
      ))
    }
    
    # Perform bootstrap
    boot_results <- boot(
      data = subset_data,
      statistic = bootstrap_cindex,
      R = n_bootstrap
    )
    
    # Calculate confidence intervals
    ci_results <- boot.ci(boot_results, type = "perc", conf = conf_level)
    
    # Create result row
    data.frame(
      Strata = strata_name,
      C_Index = as.numeric(summary(cox_result)$concordance[1]),
      C_Index_SE = as.numeric(summary(cox_result)$concordance[2]),
      CI_Lower = ci_results$percent[4],
      CI_Upper = ci_results$percent[5],
      N_Cases = sum(subset_data[[outcome]], na.rm = TRUE),
      N_Total = nrow(subset_data)
    )
  }
  
  # Create strata based on variable type
  if(strata_var == "time" && !is.null(time_col) && !is.null(time_threshold)) {
    data$strata <- ifelse(data[[time_col]] <= time_threshold,
                          paste0("=", time_threshold, " years"),
                          paste0(">", time_threshold, " years"))
  } else if(!is.null(custom_groups)) {
    if(is.numeric(data[[strata_var]])) {
      breaks <- unique(custom_groups)
      data$strata <- cut(data[[strata_var]], breaks = breaks, include.lowest = TRUE)
    } else {
      data$strata <- factor(data[[strata_var]], levels = unique(custom_groups))
    }
  } else {
    if(is.numeric(data[[strata_var]]) && length(unique(data[[strata_var]])) > 2) {
      breaks <- unique(quantile(data[[strata_var]], probs = seq(0, 1, 0.25), na.rm = TRUE))
      data$strata <- cut(data[[strata_var]], breaks = breaks, include.lowest = TRUE)
    } else {
      data$strata <- factor(data[[strata_var]], levels = sort(unique(data[[strata_var]])))
    }
  }
  
  # Calculate C-index for each stratum
  for(stratum in unique(data$strata)) {
    subset_data <- data[data$strata == stratum, ]
    stratum_result <- calc_cindex_with_boot(subset_data, as.character(stratum))
    cindex_results <- rbind(cindex_results, stratum_result)
  }
  
  # Add formatted C-index column
  cindex_results$C_Index_formatted <- sprintf("%.3f (%.3f-%.3f)", 
                                              cindex_results$C_Index,
                                              cindex_results$CI_Lower,
                                              cindex_results$CI_Upper)
  
  return(cindex_results)
}

median_FU <- median(flat_data$inc_followup_days[flat_data$hcc_inc == 1], na.rm = TRUE)

# Time stratification 
time_results <- calculate_stratified_cindex(
  data = flat_data,
  outcome = "hcc_inc",
  weighted_score = "weighted_score_sd",
  strata_var = "time",
  time_col = "inc_followup_days",
  time_threshold = median_FU)

fwrite(time_results, "score_subgrps_time_fu.csv")

# Sex stratification (categorical)
sex_results <- calculate_stratified_cindex(
  data = flat_data,
  outcome = "hcc_inc",
  weighted_score = "weighted_score_sd",
  strata_var = "sex"
)

fwrite(sex_results, "score_subgrps_sex_fu.csv")

# Age stratification with custom groups (numeric)
age_results <- calculate_stratified_cindex(
  data = flat_data,
  outcome = "hcc_inc",
  weighted_score = "weighted_score_sd",
  strata_var = "inc_entry_age",
  custom_groups = c(0, 63.1, Inf) 
)

fwrite(age_results, "score_subgrps_age.csv")

# Race
race_results <- calculate_stratified_cindex(
  data = flat_data,
  outcome = "hcc_inc",
  weighted_score = "weighted_score_sd",
  strata_var = "race2G")

fwrite(race_results, "score_subgrps_race.csv")

# BMI stratification
bmi_results <- calculate_stratified_cindex(
  data = flat_data,
  outcome = "hcc_inc",
  weighted_score = "weighted_score_sd",
  strata_var = "bmi3G")

fwrite(bmi_results, "score_subgrps_bmi.csv")

# Diabetes
diabetes_results <- calculate_stratified_cindex(
  data = flat_data,
  outcome = "hcc_inc",
  weighted_score = "weighted_score_sd",
  strata_var = "diabetesG")

fwrite(diabetes_results, "score_subgrps_diabetes.csv")

# Death (Treated differently because death is the outcome)
lc_death = bootstrap_cindex(
  data = flat_data,
  outcome = "hcc_mort",
  followup_t = "mort_followup_days",
  predictor = "weighted_score_sd")

N_deaths <- sum(flat_data$hcc_mort== 1)

lc_death_results <-   data.frame(
  Strata = "Death",
  C_Index = lc_death$boot_mean,
  C_Index_SE = lc_death$boot_sd,
  CI_Lower = lc_death$ci_lower,
  CI_Upper = lc_death$ci_upper,
  N_Cases = N_deaths,
  N_Total = nrow(flat_data),
  C_Index_formatted = sprintf("%.3f (%.3f-%.3f)", 
                              lc_death$boot_mean,
                              lc_death$ci_lower,
                              lc_death$ci_upper
  ))

fwrite(lc_death_results, "score_subgrps_death.csv")


# Combine subgroup results
# Function to add stratification variable and combine results
combine_stratified_results <- function(..., result_names = NULL) {
  # Get all the results passed to the function
  all_results <- list(...)
  
  # If no names provided, create generic names
  if (is.null(result_names)) {
    result_names <- paste0("strat_", seq_along(all_results))
  }
  
  # Process each result dataframe
  combined_results <- data.frame()
  
  for (i in seq_along(all_results)) {
    temp_df <- all_results[[i]]
    temp_df$Stratification <- result_names[i]
    combined_results <- rbind(combined_results, temp_df)
  }
  
  # Reorder columns to put Stratification first
  combined_results <- combined_results[, c("Stratification", "Strata", "C_Index", 
                                           "C_Index_SE", "CI_Lower", "CI_Upper",
                                           "N_Cases", "N_Total")]
  
  # Round numeric columns
  numeric_cols <- c("C_Index", "C_Index_SE", "CI_Lower", "CI_Upper")
  combined_results[numeric_cols] <- lapply(combined_results[numeric_cols], 
                                           function(x) round(x, 3))
  
  return(combined_results)
}

# Combine all results
final_results <- combine_stratified_results(
  time_results, lc_death_results, sex_results, 
  age_results, race_results, bmi_results, diabetes_results,
  result_names = c("Follow-up Time", "LC Mortality", "Sex", 
                   "Age", "Race", "BMI", "Diabetes")
)

# Add formatted confidence intervals
final_results$CI_95 <- sprintf("%.3f (%.3f-%.3f)", 
                               final_results$C_Index,
                               final_results$CI_Lower,
                               final_results$CI_Upper)

# Create clean version for presentation
presentation_results <- final_results[, c("Stratification", "Strata", "CI_95", 
                                          "N_Cases", "N_Total")]

# Rename columns for clarity
names(presentation_results) <- c("Stratification", "Subgroup", 
                                 "C-Index (95% CI)", "Events", "N")

fwrite(presentation_results, "score_subgrps_all.csv")
